MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv", header = TRUE)
#Creating the correct graph
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, col = Predator.lifestage)) +
geom_point(shape = 3) + geom_smooth(method = 'lm', fullrange = TRUE) + facet_grid(Type.of.feeding.interaction ~ .) +
scale_y_continuous(trans = "log10") + scale_x_continuous(trans = "log10") + xlab("Prey Mass in grams") + ylab("Predator Mass in grams") +
theme_bw() + theme(legend.position="bottom")+ coord_fixed(ratio = 0.3)+ guides(color = guide_legend(nrow=1))
# show the plot
p
# save plot
pdf("../results/PP_Regress.pdf", 11.7, 8.3)
print(p)
dev.off()
# work out stats
# define a function return the summary of lm as vector
Myfun <- function(y,z) {
x <- lm(log(y)~log(z))
intercept = summary(x)$coefficients[1]
slope = summary(x)$coefficients[2]
r_sq = summary(x)$r.squared
p.value = summary(x)$coefficients[8]
f.statistic = summary(x)$fstatistic[1]
df <- c(slope, intercept, r_sq, f.statistic, p.value)
return(df)
}
# use dplyr group_by to output the results
results <- MyDF %>% group_by(Type.of.feeding.interaction,Predator.lifestage ) %>%
summarise(Slop = Myfun(Predator.mass, Prey.mass)[1],
Intercept = Myfun(Predator.mass, Prey.mass)[2],
Rsquared = Myfun(Predator.mass, Prey.mass)[3],
Fvalue = Myfun(Predator.mass, Prey.mass)[4],
Pvalue = Myfun(Predator.mass, Prey.mass)[5])
#write into a csv file in teh results direction
write.csv(results, "../results/PP_Regress.csv", row.names = FALSE)
View(results)
View(results)
View(MyDF)
# Author: Xiaosheng Luo <Xiaosheng.luo18@imperial.ac.uk>
# Date: October 2018
# Desc: ggplot practicle for data visualisation
# clear environment
rm(list=ls())
# Load required packages #
require(ggplot2)
require(dplyr)
# load the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv", header = TRUE)
# work out stats
# define a function return the summary of lm as vector
Myfun <- function(y,z) {
x <- lm(log(y)~log(z))
intercept = summary(x)$coefficients[1]
slope = summary(x)$coefficients[2]
r_sq = summary(x)$r.squared
p.value = summary(x)$coefficients[8]
f.statistic = summary(x)$fstatistic[1]
df <- c(slope, intercept, r_sq, f.statistic, p.value)
return(df)
}
# use dplyr group_by to output the results
results <- MyDF %>% group_by(Type.of.feeding.interaction,Predator.lifestage, Location) %>%
summarise(Slop = Myfun(Predator.mass, Prey.mass)[1],
Intercept = Myfun(Predator.mass, Prey.mass)[2],
Rsquared = Myfun(Predator.mass, Prey.mass)[3],
Fvalue = Myfun(Predator.mass, Prey.mass)[4],
Pvalue = Myfun(Predator.mass, Prey.mass)[5])
#write into a csv file in teh results direction
write.csv(results, "../results/PP_Regress_loc.csv", row.names = FALSE)
View(results)
warning()
warnings()
# Author: Xiaosheng Luo <Xiaosheng.luo18@imperial.ac.uk>
# Date: October 2018
# Desc: ggplot practicle for data visualisation
# clear environment
rm(list=ls())
# Load required packages #
require(ggplot2)
require(dplyr)
# load the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv", header = TRUE)
# work out stats
# define a function return the summary of lm as vector
Myfun <- function(y,z) {
x <- lm(log(y)~log(z))
intercept = summary(x)$coefficients[1]
slope = summary(x)$coefficients[2]
r_sq = summary(x)$r.squared
p.value = summary(x)$coefficients[8]
f.statistic = summary(x)$fstatistic[1]
df <- c(slope, intercept, r_sq, f.statistic, p.value)
return(df)
}
# use dplyr group_by to output the results
results <- MyDF %>% group_by(Type.of.feeding.interaction,Predator.lifestage, Location) %>%
summarise(Slop = Myfun(Predator.mass, Prey.mass)[1],
Intercept = Myfun(Predator.mass, Prey.mass)[2],
Rsquared = Myfun(Predator.mass, Prey.mass)[3],
Fvalue = Myfun(Predator.mass, Prey.mass)[4],
Pvalue = Myfun(Predator.mass, Prey.mass)[5])
#write into a csv file in teh results direction
write.csv(results, "../results/PP_Regress_loc.csv", row.names = FALSE)
warnings()
# Author: xiaosheng.luo18@imperial.ac.uk
# Script: Girko.R
# Description: explore matrix plot
# Date: Oct 2018
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
pdf("../results/Girko.pdf")
print(p)
dev.off()
a <- read.table("../data/Results.txt", header = TRUE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
p
require(reshape2)
GenerateMatrix <- function(N){
M <- matrix(runif(N * N), N, N)
return(M)
}
M <- GenerateMatrix(10)
Melt <- melt(M)
p <- ggplot(Melt, aes(Var1, Var2, fill = value)) + geom_tile()
p
rm(list=ls())
require(reshape2)
GenerateMatrix <- function(N){
M <- matrix(runif(N * N), N, N)
return(M)
}
M <- GenerateMatrix(10)
Melt <- melt(M)
p <- ggplot(Melt, aes(Var1, Var2, fill = value)) + geom_tile()
p
View(M)
View(Melt)
View(M)
View(Melt)
View(Melt)
p <- ggplot(Melt, aes(Var1, Var2, fill = value))
p
p
require(reshape2)
GenerateMatrix <- function(N){
M <- matrix(runif(N * N), N, N)
return(M)
}
M <- GenerateMatrix(10)
Melt <- melt(M)
p <- ggplot(Melt, aes(Var1, Var2, fill = value)) + geom_point()
p
require(reshape2)
GenerateMatrix <- function(N){
M <- matrix(runif(N * N), N, N)
return(M)
}
M <- GenerateMatrix(10)
Melt <- melt(M)
p <- ggplot(Melt, aes(Var1, Var2, fill = value)) + geom_tile()
p
a <- read.table("../data/Results.txt", header = TRUE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
p
a <- read.table("../data/Results.txt", header = TRUE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
pdf("../results/Girko.pdf")
print(p)
dev.off()
a <- read.table("../data/Results.txt", header = TRUE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
a <- read.table("../data/Results.txt", header = TRUE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
pdf("../results/Girko.pdf")
print(p)
dev.off()
rm(list=ls())
a <- read.table("../data/Results.txt", header = TRUE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
pdf("../results/Girko.pdf")
print(p)
dev.off()
View(a)
View(a)
dim(a)
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
rnorm(length(x), mean = 0., sd = 2.5)
# and put them in a dataframe
my_data <- data.frame(x = x, y = y)
# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point() +
scale_colour_gradient(low = "black", high = "red") +
theme(legend.position = "none") +
scale_x_continuous(
expression(alpha^2 * pi / beta * sqrt(Theta)))
# add the regression line
p <- p + geom_abline(
intercept = my_lm$coefficients[1][1],
slope = my_lm$coefficients[2][1],
colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
rm(list=ls())
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
rnorm(length(x), mean = 0., sd = 2.5)
# and put them in a dataframe
my_data <- data.frame(x = x, y = y)
# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point() +
scale_colour_gradient(low = "black", high = "red") +
theme(legend.position = "none") +
scale_x_continuous(
expression(alpha^2 * pi / beta * sqrt(Theta)))
# add the regression line
p <- p + geom_abline(
intercept = my_lm$coefficients[1][1],
slope = my_lm$coefficients[2][1],
colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
p
pdf("../results/MyLinReg.pdf")
print(p)
dev.off()
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
rnorm(length(x), mean = 0., sd = 2.5)
# and put them in a dataframe
my_data <- data.frame(x = x, y = y)
# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point() +
scale_colour_gradient(low = "black", high = "red") +
theme(legend.position = "none") +
scale_x_continuous(
expression(alpha^2 * pi / beta * sqrt(Theta)))
# add the regression line
p <- p + geom_abline(
intercept = my_lm$coefficients[1][1],
slope = my_lm$coefficients[2][1],
colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
pdf("../results/MyLinReg.pdf")
print(p)
dev.off()
abs(5.3)
abs(-5.3)
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
rnorm(length(x), mean = 0., sd = 2.5)
# and put them in a dataframe
my_data <- data.frame(x = x, y = y)
# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point() +
scale_colour_gradient(low = "black", high = "red") +
theme(legend.position = "none") +
scale_x_continuous(
expression(alpha^2 * pi / beta * sqrt(Theta)))
# add the regression line
p <- p + geom_abline(
intercept = my_lm$coefficients[1][1],
slope = my_lm$coefficients[2][1],
colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
p
View(my_lm)
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point()
p
